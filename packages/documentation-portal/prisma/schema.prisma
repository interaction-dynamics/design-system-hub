// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

type Property {
    type         String
    name         String
    description  String
    defaultValue String?
    optional     Boolean?
    deprecated   Boolean?
}

model ComponentVariant {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    slug      String
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    providers Json

    Component   Component? @relation(fields: [componentId], references: [id])
    componentId String?    @db.ObjectId

    // @@unique([componentId, slug], name: "componentVariantSlug")
}

model Component {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    slug String
    name String

    properties Property[]
    providers  Json
    variants   ComponentVariant[]
    createdAt  DateTime           @default(now())
    updatedAt  DateTime           @updatedAt

    DesignSystem   DesignSystem? @relation(fields: [designSystemId], references: [id])
    designSystemId String?       @db.ObjectId

    // @@unique([slug, designSystemId])
}

model DesignSystem {
    id         String      @id @default(auto()) @map("_id") @db.ObjectId
    slug       String      @unique
    name       String
    components Component[]
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    providers  Json

    isPublic         Boolean
    pages            Page[]
    styles           Style[]
    figmaCredentials FigmaDesignSystemCredentials[]
    FigmaFile        FigmaFile[]

    Organization       Organization?       @relation(fields: [organizationId], references: [id])
    organizationId     String?             @db.ObjectId
    designSystemTokens DesignSystemToken[]
}

model Page {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    path      String
    slug      String
    providers Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    order     Int

    DesignSystem   DesignSystem? @relation(fields: [designSystemId], references: [id])
    designSystemId String?       @db.ObjectId
}

model Style {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    type      String
    providers Json
    metadata  Json

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    DesignSystem   DesignSystem? @relation(fields: [designSystemId], references: [id])
    designSystemId String?       @db.ObjectId
}

model FigmaDesignSystemCredentials {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    userId         Int
    accessToken    String
    expirationDate String
    refreshToken   String

    DesignSystem   DesignSystem? @relation(fields: [designSystemId], references: [id])
    designSystemId String?       @db.ObjectId
}

model FigmaFile {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    fileKey String

    DesignSystem   DesignSystem? @relation(fields: [designSystemId], references: [id])
    designSystemId String?       @db.ObjectId
}

model Organization {
    id           String                   @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    slug         String
    createdAt    DateTime                 @default(now())
    updatedAt    DateTime                 @updatedAt
    members      OrganizationMembership[]
    ownerId      String
    DesignSystem DesignSystem[]
}

model OrganizationMembership {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @db.ObjectId
    userId         String
    role           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model UserToken {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    token       String @unique
    prefix      String @unique
    description String @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
}

model DesignSystemToken {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    token       String @unique
    prefix      String @unique
    description String @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DesignSystem   DesignSystem @relation(fields: [designSystemId], references: [id])
    designSystemId String       @db.ObjectId
}
